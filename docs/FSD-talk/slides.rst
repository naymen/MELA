.. include:: <s5defs.txt>
.. |bullet| unicode:: U+02022
.. |nbsp| unicode:: 0xA0
   :trim:
.. |space| unicode:: U+020

==============================================================
Эволюция цифровых микробов (Python |nbsp| и |nbsp| вычисления)
==============================================================

:Автор: Руслан Гроховецкий (ruguevara@yandex-team.ru)
:Организация: Яндекс
:Город: Екатеринбург
:Мероприятие: День СПО
:Copyright: Public Domain

.. Основная мысль:
   Существует уникальный стек открытых технологий для исследований, основаных на вычислениях.

.. Хронометраж: 10 минут
.. Аудитория: Студенты 1-6 курсов, e-lug.ru, ot-club.org


..  container:: handout

    Меня зовут Руслан Гроховецкий, я работаю в Яндексе руководителем группы справочных сервисов, мы разрабатываем бакенды Яндекс.Погоды и Яндекс.Афиши и используем Python и Django.

    Я пишу на Питоне уже около семи лет, и у меня есть ряд хобби-проектов, на примере одного из них я бы хотел поговорить о свободном ПО.

.. contents::
   :class: handout

.. footer:: Екатеринбург |bullet| День СПО |bullet| 12 октября 2013 г.


Что за цифровые микробы?
========================

.. comment |space|

.. image:: images/digerms.png
   :align: center
   :height: 540px
.. comment   :width: 1024px

..  container:: handout

    Это коэволюция, то есть совместная эволюция, простейших цифровых микроогранизмов,
    которые состоят из сенсоров, рекуррентной нейросети и актуаторов. Актуаторы, это то,
    что действует на среду: ноги, руки, а в нашем случае это жгутики и рот.

    Цифровые микробы живут в искусственной среде с растущей травой (маленькие зеленые треугольники):
    они имеют цвет, чувствуют запахи, перемещаются, сами распространяют запахи, едят, растут,
    дерутся и размножаются.


Как они эволюционируют?
=======================
.. comment |space|

.. image:: images/ga.jpg
   :align: center
   :height: 540px

..  container:: handout

    Это генетический алгоритм, то есть оргинизмы развиваются из хромосом, а при репродукции хромосомы
    скрещиваются и мутируют. Отбор для воспроизводства происходит про принципу кто больше "наелся".
    Тут также есть элементы так называемой автоэволюции — частота мутации генов также
    подвержена эволюции.



Какую задачу решаем
===================

.. comment |space|

.. image:: images/plots.png
   :align: center
   :height: 540px

..  container:: handout

    Это исследование процесса эволюции и самоорганизации. Нам нужны были как быстрые вычисления
    с визуализацией, так и технологии, обеспечивающие быстрый процесс разработки.
    И такие технологии есть, и они открытые и бесплатные.

.. TODO Слайд: скриншот, акцент на графики


Что за технологии?
==================
.. class:: incremental

* Python_ — универсальный ЯП, нацеленный на удобство.

* NumPy_ — работа с массивами данных и быстрые операции над ними

* SciPy_ — вычисления, линейная алгебра, алгоритмы работы с данными,
  алгоритмы оптимизации

* SciKits_ — специфические алгоритмы из разных областей
    ..  container:: handout

        Если нужны специфические алгоритмы из разных областей,
        можете себе найти наверняка там.


Что за технологии?
==================
.. class:: incremental

* Theano_ — CPU/GPU компилятор математических выражений с массивами

* PyCuda_, PyOpenCL_ — для вычислений на графическом ускорителе

* SymPy_ — символьная математика, алгебра, дифференцирование и интегрирование

* Pandas_ — работа с сериями данных: наблюдения, логи, события

* StatsModels_ — статистика и статистические модели


Оптимизация и маш. обуч.
========================

* Scikit-learn_ — машинное обучение и дата майнинг
    ..  container:: handout

        много

* mlpy_ — машинное обучение

* PyBrains, PyML — Байес, нейростети, марковские модели,

* PyEvolve — генетические алгоримы

.. _Python: http://python.org/
.. _NumPy: http://numpy.scipy.org/
.. _SciPy: http://scipy.org/
.. _SciKits: http://scikits.appspot.com/
.. _Theano: http://deeplearning.net/software/theano/
.. _PyCuda: http://mathema.tician.de/software/pycuda
.. _PyOpenCL: http://mathema.tician.de/software/pyopencl
.. _SymPy: http://sympy.org/
.. _Pandas: http://pandas.pydata.org/
.. _StatsModels: http://statsmodels.sf.net/
.. _Scikit-learn: http://scikit-learn.org/stable/
.. _mlpy: http://mlpy.sourceforge.net/


Визуализация
============

* Pyglet_ — OpenGL графика-анимация, 2D / 3D
    ..  container:: handout

        много

* Matlotlib_ — всевозможные графики

* MayaVi — 3D-визуализация

.. _Pyglet: http://www.pyglet.org/
.. _Matlotlib: http://matplotlib.org/


Интерфейс пользователя
======================

* PyQT
    ..  container:: handout

        много

* wxPython

* PyGTK

* Cocos2D (более низкоуровневый)



Готовые установочные пакеты
===========================

* Python(x,y)
    ..  container:: handout

        есть

* Enthought Python Distribution

* ScientificPython_

.. _ScientificPython: http://dirac.cnrs-orleans.fr/ScientificPython/


Тысячи их
=========

* http://scipy.org/topical-software.html
    ..  container:: handout

        много

* https://wiki.python.org/moin/Applications

* https://wiki.python.org/moin/NumericAndScientific

* https://wiki.python.org/moin/UsefulModules


Почему Python
=============
.. class:: incremental

* Python — настоящий универсальный ЯП
    ..  container:: handout

        Питон уже является универсальным ЯП, что само по себе огромный плюс.
        Он имеет лаконичный, читабельный синтаксис и помогает достичь быстрой разработки:
        питон не стоит на пути, мы просто пишем наш алгоритм, не думая об специфических деталях.

* Быстрая разработка и производительный код
    ..  container:: handout

        Не нужны предварительные прототипы, то есть это альтернатива схеме "сначала пишем прототип,
        потом продакшн код". Большая часть кода уже производительная, небольшими затратами можем
        оптимизировать его до приемлемого уровня, если нужно внедрить это куда-то.

* Библиотеки для работы с БД
    ..  container:: handout

        Есть библиотеки для работы со всеми популярными базами данных, для вычислений может быть
        важно данные брать оттуда.

* Управление зависимостями — pip, virtualenv
    ..  container:: handout

        Что немаловажно, есть удобные инструменты, которые максимально облегчают установку
        пакетов и управление зависимостями — pip, virtualenv.


Быстрые вычисления
==================
.. class:: incremental

* Ядра библиотек компилированы (C/C++/Cython)

* Или биндинги до industrial-class библиотек (LAPack, BLAS, ...)
    ..  container:: handout

        Ядра библиотек компилированы (C/C++/Cython), используют биндинги до inductrial-class библиотек
        (LAPack, BLAS, OpenGL)

* Скорость работы программ хорошая (векторизация)
    ..  container:: handout

        Если вы используете векторизацию, то скорость работы программ будет хорошей и годной
        для исследовательских целей, а часто и для любых целей. Это не суперскорость,
        но очень разумный компромисс между скоростью вычислений и процесса разработки.

* Делают игры (pygame или pyglet+cocos2d)
    ..  container:: handout

        На этом стеке технологий иногда делают инди-игры

* Cython
    ..  container:: handout

        Критичные части можно написать на компилируемом языке Cython.


Чем этот стек уникален
======================
.. class:: incremental

* Огромное комьюнити
    ..  container:: handout

        Питон и эти библиотеки имеют огромное комьюнити, это технологии-лидеры,
        а не десятки разных недобиблиотек.
        Есть большое количество обучающего материала и даже международные конференции.

* Мощь и удобство
    ..  container:: handout

        Я считаю, что это уникальный случай, когда открытые технологии настолько мощны и удобны.

* Все технологии — открытые, как наука
    ..  container:: handout

        Научное сообщество, как никакое другое, понимает важность открытости. Ричард Столман сам из них.
        Некоторые из истоков этого стека технологий уходят корнями в глубь эпохи Фортрана,
        поэтому у нас есть возможность стоять на плечах гигантов, как говорил Ньютон.
        Только откытость ПО поволила достичь этого.


Почему не MATLAB, Octave, R
===========================
.. class:: incremental

* Это отдельные специфические неуниверсальные ЯП
    ..  container:: handout

        Это отдельные специфические неуниверсальные ЯП, которые нужно учить.

* Проблемы с интеграцией с чем-нибудь
    ..  container:: handout

        Поэтому если вам нужно что-о большее, чем исследование, и интеграция с чем-то, например,
        с базами данных, вебом, сетью, системой, другим ПО, это сложнее и трудозатратнее.

* MATLAB небесплатен и несвободен


Почему не C/C++/Fortran?
========================
.. class:: incremental

* Писать на C++ — это не быстро
    ..  container:: handout

        Так как стоит исследовательская задача, то необходимо, чтобы процесс разработки
        не стоял на пути и разработка была быстрой, поэтому C++ — не очень вариант.

* Нужен специфический опыт и постоянное внимание к языковым деталям
    ..  container:: handout

        Например, работа с памятью требует постоянного внимания и специфического опыта.
        Или другие детали, такие как стандартная библиотека шаблонов, о которых нужно постоянно думать,
        стоят на пути вашей чистой исследователькой мысли.


Только свободное ПО
===================

* Fork me on github: https://github.com/ruguevara/MELA
    ..  container:: handout

        Можете на гитхабе форкнуть этот проект и поиграться

* Презентация сделана в формате reStructuredText_ и сконвертирована с помощью Docutils_ в слайдшоу S5_

.. _reStructuredText: http://docutils.sf.net/rst.html
.. _Docutils: http://docutils.sf.net/
.. _S5: http://meyerweb.com/eric/tools/s5/


Приходите на стенд
==================
.. comment |space|

.. image:: images/digerms.png
   :align: center
   :height: 540px
.. comment   :width: 1024px

..  container:: handout

    Я рассказал вам об уникальном стеке открытых технологий для исследований,
    которые основаны на вычислениях.

    И я призыаю вас посмотреть на наш стенд, где я рассажу и покажу подробнее о том, как все это
    работает на примере исследования эволюции цифровых микробов.

    Также на нашем стенде вы можете предварительно записаться в Школу Анализа Данных Яндекса,
    где мы вас научим делать в том числе и быстрые вычесления на Питоне


.. topic:: Ссылки
   :class: hidden print

   .. target-notes:: :class: hidden print
